{"version":3,"sources":["Todo.js","TodoList.js","App.js","serviceWorker.js","index.js"],"names":["Todo","todo","toggleTodo","type","checked","completed","onChange","id","name","TodoList","todos","map","key","App","useState","setTodos","todoInputRef","useRef","useEffect","storedTodo","JSON","parse","localStorage","getItem","setItem","stringify","className","class","newTodos","find","ref","placeholder","onClick","e","task","current","value","prevTodos","uuidv4","filter","length","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gNAEe,SAASA,EAAT,GAAqC,IAArBC,EAAoB,EAApBA,KAAMC,EAAc,EAAdA,WAIjC,OACI,6BACI,+BACI,2BAAOC,KAAK,WAAWC,QAASH,EAAKI,UAAWC,SAN5D,WACIJ,EAAWD,EAAKM,OAMPN,EAAKO,OCPP,SAASC,EAAT,GAA0C,IAAtBC,EAAqB,EAArBA,MAAOR,EAAc,EAAdA,WACtC,OACIQ,EAAMC,KAAI,SAAAV,GACN,OAAO,kBAACD,EAAD,CAAMY,IAAKX,EAAKM,GAAIN,KAAMA,EAAMC,WAAYA,O,YC8DhDW,MAhEf,WAAgB,IAAD,EACaC,mBAAS,IADtB,mBACNJ,EADM,KACCK,EADD,KAEPC,EAAeC,mBA2CrB,OAvCAC,qBAAU,WACR,IAAMC,EAAaC,KAAKC,MAAMC,aAAaC,QAJnB,kBAMpBJ,GAAYJ,EAASI,KACxB,IAGHD,qBAAU,WACRI,aAAaE,QAXW,gBAWgBJ,KAAKK,UAAUf,MACtD,CAACA,IA+BF,yBAAKgB,UAAW,cACd,yBAAKC,MAAM,eACX,kBAAClB,EAAD,CAAUC,MAAOA,EAAOR,WApB5B,SAAoBK,GAClB,IAAMqB,EAAQ,YAAOlB,GACfT,EAAO2B,EAASC,MAAK,SAAA5B,GAAI,OAAIA,EAAKM,KAAOA,KAC/CN,EAAKI,WAAaJ,EAAKI,UACvBU,EAASa,OAkBP,2BAAOF,UAAU,YAAYI,IAAKd,EAAcb,KAAK,OAAO4B,YAAY,8BACxE,yBAAKJ,MAAM,eACX,4BAAQD,UAAW,SAASM,QAjChC,SAAuBC,GACrB,IAAMC,EAAOlB,EAAamB,QAAQC,MACrB,KAATF,IACJnB,GAAS,SAAAsB,GACP,MAAM,GAAN,mBAAWA,GAAX,CAAsB,CAAE9B,GAAI+B,cAAU9B,KAAM0B,EAAM7B,WAAW,QAE/DW,EAAamB,QAAQC,MAAQ,QA2B3B,aACA,4BAAQV,UAAU,SAASM,QAb/B,WACE,IAAMJ,EAAWlB,EAAM6B,QAAO,SAAAtC,GAAI,OAAKA,EAAKI,aAC5CU,EAASa,KAWP,mBACA,4BAAQF,UAAU,SAASM,QAnB/B,WAEEjB,EADiB,MAkBf,eAEA,yBAAKY,MAAM,eACRjB,EAAM6B,QAAO,SAAAtC,GAAI,OAAKA,EAAKI,aAAWmC,OADzC,mBChDcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.8f619480.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport default function Todo({ todo, toggleTodo }) {\r\n    function handleTodoClick() {\r\n        toggleTodo(todo.id)\r\n    }\r\n    return (\r\n        <div>\r\n            <label>\r\n                <input type=\"checkbox\" checked={todo.completed} onChange={handleTodoClick} />\r\n                {todo.name}\r\n            </label>\r\n\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport Todo from './Todo'\r\n\r\nexport default function TodoList({ todos, toggleTodo }) {\r\n    return (\r\n        todos.map(todo => {\r\n            return <Todo key={todo.id} todo={todo} toggleTodo={toggleTodo} />\r\n        })\r\n    )\r\n}\r\n","import React, { useState, useRef, useEffect } from 'react';\nimport './App.css';\nimport TodoList from './TodoList';\nimport { v4 as uuidv4 } from 'uuid';\nfunction App() {\n  const [todos, setTodos] = useState([])\n  const todoInputRef = useRef()\n  const LOCAL_STORAGE_KEY = 'todoApp.todos'\n\n  //  If todo is empty we are trying to getting back stored todos form local storage\n  useEffect(() => {\n    const storedTodo = JSON.parse(localStorage.getItem(LOCAL_STORAGE_KEY))\n\n    if (storedTodo) setTodos(storedTodo)\n  }, [])\n\n  // Storing the existing todo in local storage \n  useEffect(() => {\n    localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(todos))\n  }, [todos])\n\n\n\n  function handleAddTodo(e) {\n    const task = todoInputRef.current.value\n    if (task === '') return\n    setTodos(prevTodos => {\n      return [...prevTodos, { id: uuidv4(), name: task, completed: false }]\n    })\n    todoInputRef.current.value = null\n  }\n\n  function toggleTodo(id) {\n    const newTodos = [...todos]\n    const todo = newTodos.find(todo => todo.id === id)\n    todo.completed = !todo.completed\n    setTodos(newTodos)\n  }\n\n  function handleClearAll() {\n    const newTodos = []\n    setTodos(newTodos)\n  }\n\n  function handleClearCompleted() {\n    const newTodos = todos.filter(todo => !todo.completed)\n    setTodos(newTodos)\n  }\n\n  return (\n    <div className =\"App-header\">\n      <div class=\"Div-spacing\">\n      <TodoList todos={todos} toggleTodo={toggleTodo} />\n      </div>\n      <input className=\"Input-box\" ref={todoInputRef} type=\"text\" placeholder=\" Add a New Task here !!..\" />\n      <div class=\"Div-spacing\">\n      <button className= \"Button\" onClick={handleAddTodo}>Add To do</button>\n      <button className=\"Button\" onClick={handleClearCompleted}>Clear Completed</button>\n      <button className=\"Button\" onClick={handleClearAll}>Delete all</button>\n      </div>\n      <div class=\"Div-spacing\">\n        {todos.filter(todo => !todo.completed).length} Pending Task\n    </div>\n    </div>\n\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}